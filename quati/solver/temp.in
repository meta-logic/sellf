% We use the following predicate names:
%
%  form(X) ->  Denotes that X is a formula;
%  in(X, Ctx) -> Denotes that the  formula X is in the context Ctx; 
%  union(C1, C2, C3)  -> Denotes that the union of the contexts C1 and C2
%    contains the same elements as the context C3;
% ctx(Ctx, Sub, Lin/Unb, Leaf, Tree) -> Denotes that the context Ctx belongs to the 
%   linear/unbounded subexponential of the open leaf Leaf of the tree Tree.
% in_geq(F, Sub, Leaf) -> Denotes that the formula F is in a context of a subexponential of 
%   of the Leaf that is greater than the subexponential Sub.
% provIf(Leaf1, Leaf2) -> Denotes that the Leaf1 is provable if Leaf2 is provable.

in(X, S) :- in(X, S1), union(S1, S2, S).
in(X, S) :- in(X, S2), union(S1, S2, S).
in(X, S1) v in(X, S2) :- in(X, S), union(S1, S2, S).

in(F, G) :- elin(F, G).
:- in(F, G), elin(F1, G), F != F1.

:- in(X, G), emp(G).

% removed(F, G, G1): removing the formula F from context G yields the context G1

in(F1, G1) :- removed(F, G, G1), in(F1, G), F != F1.

emp(G1) :- emp(G), union(G1, G2, G).
emp(G2) :- emp(G), union(G1, G2, G).
elin(F, G1) v elin(F, G2) :- elin(F, G), union(G1, G2, G).
emp(G1) v emp(G2) :- elin(F, G), union(G1, G2, G).
emp(G) :- emp(G1), emp(G2), union(G1, G2, G).

union(gamma_20, gamma_21, gamma_19).
union(r_34, r_35, r_33).
union(r_35, r_38, r_39).
union(l_14, l_15, l_13).
union(gamma_28, gamma_29, gamma_27).
union(r_48, r_49, r_39).
union(l_20, l_21, l_15).
union(gamma_30, gamma_31, gamma_29).
union(r_50, r_51, r_49).
union(r_50, r_52, r_53).
union(r_51, r_54, r_55).
union(l_22, l_23, l_21).
removed("(sigma \B (sigma \A (not ( rght ( and A B  )  ))  * ( [r]? ( rght A  ) ) * ( [r]? ( rght B  ) )))", gamma_21, gamma_27).
removed("(sigma \B (sigma \A (not ( rght ( or A B  )  ))  * ( [r]? ( rght A  ) ) + ( [r]? ( rght B  ) )))", gamma_18, gamma_19).
in("(sigma \B (sigma \A (not ( rght ( and A B  )  ))  * ( [r]? ( rght A  ) ) * ( [r]? ( rght B  ) )))", gamma_21).
in("(sigma \B (sigma \A (not ( rght ( and A B  )  ))  * ( [r]? ( rght A  ) ) * ( [r]? ( rght B  ) )))", gamma_19).
in("(sigma \B (sigma \A (not ( rght ( and A B  )  ))  * ( [r]? ( rght A  ) ) * ( [r]? ( rght B  ) )))", gamma_18).
in("(sigma \B (sigma \A (not ( rght ( or A B  )  ))  * ( [r]? ( rght A  ) ) + ( [r]? ( rght B  ) )))", gamma_18).
in("(\B (\A ( rght ( or A B  )  )))", r_34).
in("(\B (\A ( rght ( or A B  )  )))", r_33).
in("(\B ( rght B  ))", r_38).
in("(\B ( rght B  ))", r_39).
in("(\B (\A ( rght ( and A B  )  )))", r_39).
in("(\B (\A ( rght ( and A B  )  )))", r_48).
in("(\A ( rght A  ))", r_52).
in("(\A ( rght A  ))", r_53).
in("(\B ( rght B  ))", r_54).
in("(\B ( rght B  ))", r_55).
elin("(\B (\A ( rght ( or A B  )  )))", r_34).
elin("(\B ( rght B  ))", r_38).
elin("(\B (\A ( rght ( and A B  )  )))", r_48).
elin("(\A ( rght A  ))", r_52).
elin("(\B ( rght B  ))", r_54).
emp(gamma_20).
emp(l_14).
emp(gamma_28).
emp(l_20).
in("(\B ( rght B  ))", r_49).
in("(\B (\A ( rght ( and A B  )  )))", r_35).
in("(\B ( rght B  ))", r_50).
in("(\B ( rght B  ))", r_53).
in("(\B (\A ( rght ( and A B  )  )))", r_33).
