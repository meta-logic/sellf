I) Requirements:

These tools must be installed for 'sellf' to work.
- ocaml (http://caml.inria.fr/)
- dlv (http://www.dbai.tuwien.ac.at/proj/dlv/)

NOTE: The system was implemented and tested in Linux/Ubuntu. Other operating
systems were not yet tried.

II) Installation:

Go to the directory 'src' and type 'make'.

III) Syntax

The operators of linear logic with subexponentials and its syntax are:

tensor -> ,
plus   -> ;
with   -> &
par    -> |
!l     -> [l]bang
?l     -> [l]?
one    -> one
zero   -> zero
top    -> top
bottom -> bot

To comment some line in your file, start it with the symbol '%'.
Signature files have sufix '.sig' and the program file has sufix '.pl' (both
must have the same name).

IV) Running:

After compilation, an executable file called 'sellf' will be created in the src
folder. To execute it, just type:

./sellf

and press enter. A command line prompt will appear with the symbol ':>'. For a
list of commands available, you can type '#help'. Here I will only go through a
small example so that you can understand quickly how the system works.

Some example specifications can be found inside the 'examples' folder. If you
open the file 'll.pl' you can see the specification of linear logic (without
subexponentials). A specification rule has the following form:

rght (tensor a b) :: ([slin]? (rght a)) , ([slin]? (rght b)).

On the left-hand side of :: is an atomic predicate ('rght' or 'lft') taking as
argument a formula of the object logic. On the right-hand side of :: is
the formula in linear logic with subexponentials (our meta logic) that specifies 
the connective of the object logic. The rule above is the specification of the
inference rule for the introduction of 'tensor' on the right hand side.

A specification can be built of formulas using these operators and the
predicates 'rght' or 'lft' that atomizes formulas of the object logic. It is
important to note that the system only deals with specifications using constants
(lower case letters) so far.

To load the file 'll.pl' of the examples folder, run 'sellf' as expalined above
and type:

#load ../examples/ll

Then, the system will display a '?>' symbol indicating that the file is loaded.
Some commands are available in this state. To check if all the rules are
permutable, just type:

#perm

The system checks all the possible combinations of two rules among those in the
specification file and prints out on the screen if they are permutable or not.


