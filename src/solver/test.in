% We use the following predicate names:
%
%  form(X) ->  Denotes that X is a formula;
%  in(X, Ctx) -> Denotes that the  formula X is in the context Ctx; 
%  union(C1, C2, C3)  -> Denotes that the union of the contexts C1 and C2
%    contains the same elements as the context C3;
% ctx(Ctx, Sub, Lin/Unb, Leaf, Tree) -> Denotes that the context Ctx belongs to the 
%   linear/unbounded subexponential of the open leaf Leaf of the tree Tree.
% in_geq(F, Sub, Leaf) -> Denotes that the formula F is in a context of a subexponential of 
%   of the Leaf that is greater than the subexponential Sub.
% provIf(Leaf1, Leaf2) -> Denotes that the Leaf1 is provable if Leaf2 is provable.

in(X, S) :- in(X, S1), union(S1, S2, S).
in(X, S) :- in(X, S2), union(S1, S2, S).
in(X, S1) v in(X, S2) :- in(X, S), union(S1, S2, S).

in(F, G) :- elin(F, G).
:- in(F, G), elin(F1, G), F != F1.

:- in(X, G), emp(G).

% removed(F, G, G1): removing the formula F from context G yields the context G1

in(F1, G1) :- removed(F, G, G1), in(F1, G), F != F1.

emp(G1) :- emp(G), union(G1, G2, G).
emp(G2) :- emp(G), union(G1, G2, G).
elin(F, G1) v elin(F, G2) :- elin(F, G), union(G1, G2, G).
emp(G1) v emp(G2) :- elin(F, G), union(G1, G2, G).
emp(G) :- emp(G1), emp(G2), union(G1, G2, G).

:- not in("(sigma \B (sigma \A (not ( rght ( imp A B  )  ))  * ( [l]? ( lft A  ) ) | ( [r]? ( rght B  ) )))",  gamma_12).
removed("(sigma \B (sigma \A (not ( rght ( imp A B  )  ))  * ( [l]? ( lft A  ) ) | ( [r]? ( rght B  ) )))",  gamma_12,  gamma_13).
in("(sigma \B (sigma \A (not ( rght ( imp A B  )  ))  * ( [l]? ( lft A  ) ) | ( [r]? ( rght B  ) )))",  gamma_12).
in("(sigma \B (sigma \A (not ( lft ( imp A B  )  ))  * ( [l]bang ( [r]? ( rght A  ) ) ) * ( [l]? ( lft B  ) )))",  gamma_12).
union( gamma_14,  gamma_15,  gamma_13).
union(r_16, r_17, r_15).
union(l_16, l_17, l_15).
elin("( rght ( imp A B  )  )", r_16).
emp( gamma_14).
emp(l_16).
elin("( lft A  )", l_18).
union(l_17, l_18, l_19).
elin("( rght B  )", r_18).
union(r_17, r_18, r_19).
